// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million,
// find the sum of the even-valued terms.

def fibSequence(max: Int, sequence: List[Int] = List(0,1)) : List[Int] = {
  if (sequence.last >= max) return sequence.filter((num) => num <= max)

  val sequenceLast = sequence.last
  val sequenceSecondLast = sequence(sequence.length - 2)

  val newSeq = sequence :+ (sequenceLast + sequenceSecondLast)

  fibSequence(max, newSeq)
}

val answer =
  fibSequence(4000000)
    .filter((num) => num % 2 != 0)
    .foldLeft(0)(_+_)

println(answer)